export { acceptCompletion, autocompletion, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, Completion, CompletionContext, CompletionResult, CompletionSource, completionStatus, currentCompletions, ifNotIn, moveCompletionSelection, selectedCompletion, selectedCompletionIndex, startCompletion } from '@codemirror/autocomplete';
export { cursorMatchingBracket, cursorGroupLeft, cursorGroupRight, cursorSyntaxLeft, cursorSyntaxRight, history, historyKeymap, indentLess, indentMore, insertNewlineAndIndent, redo, redoSelection, selectMatchingBracket, selectGroupLeft, selectGroupRight, selectSyntaxLeft, selectSyntaxRight, standardKeymap, toggleComment, undo, undoSelection } from '@codemirror/commands';
export * as html from '@codemirror/lang-html';
export * as javascript from '@codemirror/lang-javascript';
export { bracketMatching, codeFolding, bidiIsolates, ensureSyntaxTree, foldGutter, foldKeymap, HighlightStyle, indentOnInput, indentUnit, Language, LanguageSupport, StreamLanguage, StreamParser, StringStream, syntaxHighlighting, syntaxTree, TagStyle, syntaxParserRunning, forceParsing } from '@codemirror/language';
export { highlightSelectionMatches, selectNextOccurrence } from '@codemirror/search';
export { Annotation, AnnotationType, ChangeDesc, ChangeSet, ChangeSpec, Compartment, EditorSelection, EditorState, EditorStateConfig, Extension, Facet, Line, MapMode, Prec, Range, RangeSet, RangeSetBuilder, SelectionRange, StateEffect, StateEffectType, StateField, Text, TextIterator, Transaction, TransactionSpec } from '@codemirror/state';
export { Command, Decoration, DecorationSet, drawSelection, EditorView, gutter, GutterMarker, gutters, highlightSpecialChars, KeyBinding, keymap, lineNumberMarkers, lineNumbers, MatchDecorator, Panel, placeholder, repositionTooltips, scrollPastEnd, showPanel, showTooltip, Tooltip, tooltips, TooltipView, ViewPlugin, ViewUpdate, WidgetType } from '@codemirror/view';
export { NodeProp, NodeSet, NodeType, Parser, SyntaxNode, Tree, TreeCursor } from '@lezer/common';
export { highlightTree, Tag, tags } from '@lezer/highlight';
export { LRParser } from '@lezer/lr';
export { StyleModule } from 'style-mod';
export { indentationMarkers } from '@replit/codemirror-indentation-markers';
export declare function angular(): Promise<any>;
export declare function clojure(): Promise<any>;
export declare function coffeescript(): Promise<any>;
export declare function cpp(): Promise<any>;
export declare const css: {
    cssCompletionSource: any;
    cssLanguage: any;
    css(): any;
};
export declare function dart(): Promise<any>;
export declare function gss(): Promise<any>;
export declare function go(): Promise<any>;
export declare function java(): Promise<any>;
export declare function kotlin(): Promise<any>;
export declare function less(): Promise<any>;
export declare function markdown(): Promise<any>;
export declare function php(): Promise<any>;
export declare function python(): Promise<any>;
export declare function sass(): Promise<any>;
export declare function scala(): Promise<any>;
export declare function shell(): Promise<any>;
export declare function svelte(): Promise<any>;
export declare function cssStreamParser(): Promise<any>;
export declare function vue(): Promise<any>;
export declare function wast(): Promise<any>;
export declare function xml(): Promise<any>;

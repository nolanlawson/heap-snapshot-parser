import './Toolbar.js';
import * as Platform from '../../core/platform/platform.js';
import * as Buttons from '../components/buttons/buttons.js';
import * as IconButton from '../components/icon_button/icon_button.js';
declare global {
    interface HTMLElementTagNameMap {
        'devtools-checkbox': CheckboxLabel;
        'dt-close-button': DevToolsCloseButton;
        'dt-icon-label': DevToolsIconLabel;
        'dt-small-bubble': DevToolsSmallBubble;
    }
}
class CheckboxLabel extends HTMLElement {
    #private;
    static readonly observedAttributes: string[];
    constructor();
    static create(title?: Platform.UIString.LocalizedString, checked?: boolean, subtitle?: Platform.UIString.LocalizedString, jslogContext?: string, small?: boolean): CheckboxLabel;
    attributeChangedCallback(name: string, _oldValue: string | null, newValue: string | null): void;
    get checked(): boolean;
    set checked(checked: boolean);
    set disabled(disabled: boolean);
    get disabled(): boolean;
    set indeterminate(indeterminate: boolean);
    get indeterminate(): boolean;
    set name(name: string);
    get name(): string;
    click(): void;
    /** Only to be used when the checkbox label is 'generated' (a regex, a className, etc). Most checkboxes should be create()'d with UIStrings */
    static createWithStringLiteral(title?: string, checked?: boolean, jslogContext?: string, small?: boolean): CheckboxLabel;
    private static lastId;
}
class DevToolsIconLabel extends HTMLElement {
    #private;
    constructor();
    set data(data: IconButton.Icon.IconData);
}
class DevToolsSmallBubble extends HTMLElement {
    private textElement;
    constructor();
    set type(type: string);
}
class DevToolsCloseButton extends HTMLElement {
    #private;
    constructor();
    setAccessibleName(name: string): void;
    setSize(size: Buttons.Button.Size): void;
    setTabbable(tabbable: boolean): void;
}

// auto-generated by tsr to preserve module declaration as augmentation
// this may not be necessary if an import statement exists
export {};

declare global {
    interface Window {
        __sourceFileEvents: Map<number, {
            files: string[];
            handler: (e: Event) => void;
        }>;
    }
}
interface LabelMapping {
    label: string;
    moduleOffset: number;
    bytecode: number;
    sourceLine: number;
    labelLine: number;
    labelColumn: number;
}
class WasmLocationLabels {
    #private;
    constructor(source: string, wasm: string, mappings: Map<string, LabelMapping[]>);
    static load(source: string, wasm: string): WasmLocationLabels;
    checkLocationForLabel(label: string): Promise<LabelMapping>;
    addBreakpointsForLabelInSource(label: string): Promise<void>;
    addBreakpointsForLabelInWasm(label: string): Promise<void>;
    setBreakpointInSourceAndRun(label: string, script: string): Promise<void>;
    setBreakpointInWasmAndRun(label: string, script: string): Promise<void>;
    continueAndCheckForLabel(label: string): Promise<void>;
    getMappingsForPlugin(): LabelMapping[];
}

// auto-generated by tsr to preserve module declaration as augmentation
// this may not be necessary if an import statement exists
export {};
